Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : unit 
Line# 3: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 3: Token <ID> Lexeme x found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 3: Token <ID> Lexeme y found
Line# 3: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : program unit 
Line# 5: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 5: Token <ID> Lexeme add_int found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 5: Token <COMMA> Lexeme , found
parameter_list  : type_specifier 
Line# 5: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 5: Token <RPAREN> Lexeme ) found
parameter_list  : parameter_list COMMA type_specifier 
Line# 5: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <ID> Lexeme mul_float found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <COMMA> Lexeme , found
parameter_list  : type_specifier 
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <COMMA> Lexeme , found
parameter_list  : parameter_list COMMA type_specifier 
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <RPAREN> Lexeme ) found
parameter_list  : parameter_list COMMA type_specifier 
Line# 7: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 9: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 9: Token <ID> Lexeme print_global found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 11: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 11: Token <ID> Lexeme main found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <LCURL> Lexeme { found
Line# 12: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 12: Token <ID> Lexeme list found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 5 found
Line# 12: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 12: Token <COMMA> Lexeme , found
Line# 12: Token <ID> Lexeme another_list found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 5 found
Line# 12: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 12: Token <COMMA> Lexeme , found
Line# 12: Token <ID> Lexeme i found
Line# 12: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 14: Token <ID> Lexeme a found
Line# 14: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 14: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 14: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term  
Line# 14: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <RCURL> Lexeme } found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	7--> <i, ARRAY, INT> 
	8--> <list, ARRAY, INT> <another_list, ARRAY, INT[]> 
	ScopeTable# 1
	1--> <y, FLOAT> <print_global, FUNCTION, VOID> 
	2--> <main, FUNCTION, INT> 
	4--> <add_int, FUNCTION, INT> 
	6--> <mul_float, FUNCTION, FLOAT> 
	10--> <a, INT> 
	11--> <b, INT> <x, FLOAT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
Line# 14: Token <CONST_INT> Lexeme 4 found
start : program 
Total Lines: 14
Total Errors: 1
