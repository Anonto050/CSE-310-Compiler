start : program 	<Line: 1-14>
 program : program unit 	<Line: 1-14>
  program : program unit 	<Line: 1-9>
   program : program unit 	<Line: 1-7>
    program : program unit 	<Line: 1-5>
     program : program unit 	<Line: 1-3>
      program : unit 	<Line: 1-1>
       unit : var_declaration 	<Line: 1-1>
        var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
         type_specifier : INT 	<Line: 1-1>
          INT : int	<Line: 1>
         declaration_list : declaration_list COMMA ID 	<Line: 1-1>
          declaration_list : ID 	<Line: 1-1>
           ID : a	<Line: 1>
          COMMA : ,	<Line: 1>
          ID : b	<Line: 1>
         SEMICOLON : ;	<Line: 1>
      unit : var_declaration 	<Line: 3-3>
       var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 3-3>
        type_specifier : FLOAT 	<Line: 3-3>
         FLOAT : float	<Line: 3>
        declaration_list : declaration_list COMMA ID 	<Line: 3-3>
         declaration_list : ID 	<Line: 3-3>
          ID : x	<Line: 3>
         COMMA : ,	<Line: 3>
         ID : y	<Line: 3>
        SEMICOLON : ;	<Line: 3>
     unit : func_declaration 	<Line: 5-5>
      func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 	<Line: 5-5>
       type_specifier : INT 	<Line: 5-5>
        INT : int	<Line: 5>
       ID : add_int	<Line: 5>
       LPAREN : (	<Line: 5>
       parameter_list : parameter_list COMMA type_specifier 	<Line: 5-5>
        parameter_list : type_specifier 	<Line: 5-5>
         type_specifier : INT 	<Line: 5-5>
          INT : int	<Line: 5>
        COMMA : ,	<Line: 5>
        type_specifier : INT 	<Line: 5-5>
         INT : int	<Line: 5>
       RPAREN : )	<Line: 5>
       SEMICOLON : ;	<Line: 5>
    unit : func_declaration 	<Line: 7-7>
     func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 	<Line: 7-7>
      type_specifier : FLOAT 	<Line: 7-7>
       FLOAT : float	<Line: 7>
      ID : mul_float	<Line: 7>
      LPAREN : (	<Line: 7>
      parameter_list : parameter_list COMMA type_specifier 	<Line: 7-7>
       parameter_list : parameter_list COMMA type_specifier 	<Line: 7-7>
        parameter_list : type_specifier 	<Line: 7-7>
         type_specifier : FLOAT 	<Line: 7-7>
          FLOAT : float	<Line: 7>
        COMMA : ,	<Line: 7>
        type_specifier : FLOAT 	<Line: 7-7>
         FLOAT : float	<Line: 7>
       COMMA : ,	<Line: 7>
       type_specifier : FLOAT 	<Line: 7-7>
        FLOAT : float	<Line: 7>
      RPAREN : )	<Line: 7>
      SEMICOLON : ;	<Line: 7>
   unit : func_declaration 	<Line: 9-9>
    func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON 	<Line: 9-9>
     type_specifier : VOID 	<Line: 9-9>
      VOID : void	<Line: 9>
     ID : print_global	<Line: 9>
     LPAREN : (	<Line: 9>
     RPAREN : )	<Line: 9>
     SEMICOLON : ;	<Line: 9>
  unit : func_definition 	<Line: 11-14>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 11-14>
    type_specifier : INT 	<Line: 11-11>
     INT : int	<Line: 11>
    ID : main	<Line: 11>
    LPAREN : (	<Line: 11>
    RPAREN : )	<Line: 11>
    compound_statement : LCURL statements RCURL 	<Line: 11-14>
     LCURL : {	<Line: 11>
     statements : statements statement 	<Line: 12-14>
      statements : statement 	<Line: 12-12>
       statement : var_declaration 	<Line: 12-12>
        var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 12-12>
         type_specifier : INT 	<Line: 12-12>
          INT : int	<Line: 12>
         declaration_list : declaration_list COMMA ID 	<Line: 12-12>
          declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 12-12>
           declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 12-12>
            ID : list	<Line: 12>
            LSQUARE : [	<Line: 12>
            CONST_INT : 5	<Line: 12>
            RSQUARE : ]	<Line: 12>
           COMMA : ,	<Line: 12>
           ID : another_list	<Line: 12>
           LSQUARE : [	<Line: 12>
           CONST_INT : 5	<Line: 12>
           RSQUARE : ]	<Line: 12>
          COMMA : ,	<Line: 12>
          ID : i	<Line: 12>
         SEMICOLON : ;	<Line: 12>
      statement : expression_statement 	<Line: 14-14>
       expression_statement : expression SEMICOLON 	<Line: 14-14>
        expression : logic_expression 	<Line: 14-14>
         logic_expression : rel_expression 	<Line: 14-14>
          rel_expression : simple_expression 	<Line: 14-14>
           simple_expression : simple_expression ADDOP term 	<Line: 14-14>
            simple_expression : simple_expression ADDOP term 	<Line: 14-14>
             simple_expression : simple_expression ADDOP term 	<Line: 14-14>
              simple_expression : term 	<Line: 14-14>
               term : unary_expression 	<Line: 14-14>
                unary_expression : factor 	<Line: 14-14>
                 factor : variable 	<Line: 14-14>
                  variable : ID 	<Line: 14-14>
                   ID : a	<Line: 14>
              ADDOP : -	<Line: 14>
              term : unary_expression 	<Line: 14-14>
               unary_expression : factor 	<Line: 14-14>
                factor : CONST_INT 	<Line: 14-14>
                 CONST_INT : 1	<Line: 14>
             ADDOP : +	<Line: 14>
             term : unary_expression 	<Line: 14-14>
              unary_expression : factor 	<Line: 14-14>
               factor : CONST_INT 	<Line: 14-14>
                CONST_INT : 2	<Line: 14>
            ADDOP : -	<Line: 14>
            term : unary_expression 	<Line: 14-14>
             unary_expression : factor 	<Line: 14-14>
              factor : CONST_INT 	<Line: 14-14>
               CONST_INT : 3	<Line: 14>
     RCURL : }	<Line: 14>
